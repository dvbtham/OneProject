!function (a, b, c) {
    !function () { var g, h, m, d = "2.2.3", e = "datepicker", f = ".datepicker-here", i = !1, j = '<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>', k = { classes: "", inline: !1, language: "ru", startDate: new Date, firstDay: "", weekends: [6, 0], dateFormat: "", altField: "", altFieldDateFormat: "@", toggleSelected: !0, keyboardNav: !0, position: "bottom left", offset: 12, view: "days", minView: "days", showOtherMonths: !0, selectOtherMonths: !0, moveToOtherMonthsOnSelect: !0, showOtherYears: !0, selectOtherYears: !0, moveToOtherYearsOnSelect: !0, minDate: "", maxDate: "", disableNavWhenOutOfRange: !0, multipleDates: !1, multipleDatesSeparator: ",", range: !1, todayButton: !1, clearButton: !1, showEvent: "focus", autoClose: !1, monthsField: "monthsShort", prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>', nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>', navTitles: { days: "MM, <i>yyyy</i>", months: "yyyy", years: "yyyy1 - yyyy2" }, timepicker: !1, onlyTimepicker: !1, dateTimeSeparator: " ", timeFormat: "", minHours: 0, maxHours: 24, minMinutes: 0, maxMinutes: 59, hoursStep: 1, minutesStep: 1, onSelect: "", onShow: "", onHide: "", onChangeMonth: "", onChangeYear: "", onChangeDecade: "", onChangeView: "", onRenderCell: "" }, l = { ctrlRight: [17, 39], ctrlUp: [17, 38], ctrlLeft: [17, 37], ctrlDown: [17, 40], shiftRight: [16, 39], shiftUp: [16, 38], shiftLeft: [16, 37], shiftDown: [16, 40], altUp: [18, 38], altRight: [18, 39], altLeft: [18, 37], altDown: [18, 40], ctrlShiftUp: [16, 17, 38] }, n = function (a, d) { this.el = a, this.$el = b(a), this.opts = b.extend(!0, {}, k, d, this.$el.data()), g == c && (g = b("body")), this.opts.startDate || (this.opts.startDate = new Date), "INPUT" == this.el.nodeName && (this.elIsInput = !0), this.opts.altField && (this.$altField = "string" == typeof this.opts.altField ? b(this.opts.altField) : this.opts.altField), this.inited = !1, this.visible = !1, this.silent = !1, this.currentDate = this.opts.startDate, this.currentView = this.opts.view, this._createShortCuts(), this.selectedDates = [], this.views = {}, this.keys = [], this.minRange = "", this.maxRange = "", this._prevOnSelectValue = "", this.init() }; m = n, m.prototype = { VERSION: d, viewIndexes: ["days", "months", "years"], init: function () { i || this.opts.inline || !this.elIsInput || this._buildDatepickersContainer(), this._buildBaseHtml(), this._defineLocale(this.opts.language), this._syncWithMinMaxDates(), this.elIsInput && (this.opts.inline || (this._setPositionClasses(this.opts.position), this._bindEvents()), this.opts.keyboardNav && !this.opts.onlyTimepicker && this._bindKeyboardEvents(), this.$datepicker.on("mousedown", this._onMouseDownDatepicker.bind(this)), this.$datepicker.on("mouseup", this._onMouseUpDatepicker.bind(this))), this.opts.classes && this.$datepicker.addClass(this.opts.classes), this.opts.timepicker && (this.timepicker = new b.fn.datepicker.Timepicker(this, this.opts), this._bindTimepickerEvents()), this.opts.onlyTimepicker && this.$datepicker.addClass("-only-timepicker-"), this.views[this.currentView] = new b.fn.datepicker.Body(this, this.currentView, this.opts), this.views[this.currentView].show(), this.nav = new b.fn.datepicker.Navigation(this, this.opts), this.view = this.currentView, this.$el.on("clickCell.adp", this._onClickCell.bind(this)), this.$datepicker.on("mouseenter", ".datepicker--cell", this._onMouseEnterCell.bind(this)), this.$datepicker.on("mouseleave", ".datepicker--cell", this._onMouseLeaveCell.bind(this)), this.inited = !0 }, _createShortCuts: function () { this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-86399999136e5), this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(86399999136e5) }, _bindEvents: function () { this.$el.on(this.opts.showEvent + ".adp", this._onShowEvent.bind(this)), this.$el.on("mouseup.adp", this._onMouseUpEl.bind(this)), this.$el.on("blur.adp", this._onBlur.bind(this)), this.$el.on("keyup.adp", this._onKeyUpGeneral.bind(this)), b(a).on("resize.adp", this._onResize.bind(this)), b("body").on("mouseup.adp", this._onMouseUpBody.bind(this)) }, _bindKeyboardEvents: function () { this.$el.on("keydown.adp", this._onKeyDown.bind(this)), this.$el.on("keyup.adp", this._onKeyUp.bind(this)), this.$el.on("hotKey.adp", this._onHotKey.bind(this)) }, _bindTimepickerEvents: function () { this.$el.on("timeChange.adp", this._onTimeChange.bind(this)) }, isWeekend: function (a) { return this.opts.weekends.indexOf(a) !== -1 }, _defineLocale: function (a) { "string" == typeof a ? (this.loc = b.fn.datepicker.language[a], this.loc || (console.warn("Can't find language \"" + a + '" in Datepicker.language, will use "ru" instead'), this.loc = b.extend(!0, {}, b.fn.datepicker.language.ru)), this.loc = b.extend(!0, {}, b.fn.datepicker.language.ru, b.fn.datepicker.language[a])) : this.loc = b.extend(!0, {}, b.fn.datepicker.language.ru, a), this.opts.dateFormat && (this.loc.dateFormat = this.opts.dateFormat), this.opts.timeFormat && (this.loc.timeFormat = this.opts.timeFormat), "" !== this.opts.firstDay && (this.loc.firstDay = this.opts.firstDay), this.opts.timepicker && (this.loc.dateFormat = [this.loc.dateFormat, this.loc.timeFormat].join(this.opts.dateTimeSeparator)), this.opts.onlyTimepicker && (this.loc.dateFormat = this.loc.timeFormat); var c = this._getWordBoundaryRegExp; (this.loc.timeFormat.match(c("aa")) || this.loc.timeFormat.match(c("AA"))) && (this.ampm = !0) }, _buildDatepickersContainer: function () { i = !0, g.append('<div class="datepickers-container" id="datepickers-container"></div>'), h = b("#datepickers-container") }, _buildBaseHtml: function () { var a, c = b('<div class="datepicker-inline">'); a = "INPUT" == this.el.nodeName ? this.opts.inline ? c.insertAfter(this.$el) : h : c.appendTo(this.$el), this.$datepicker = b(j).appendTo(a), this.$content = b(".datepicker--content", this.$datepicker), this.$nav = b(".datepicker--nav", this.$datepicker) }, _triggerOnChange: function () { if (!this.selectedDates.length) { if ("" === this._prevOnSelectValue) return; return this._prevOnSelectValue = "", this.opts.onSelect("", "", this) } var c, a = this.selectedDates, b = m.getParsedDate(a[0]), d = this, e = new Date(b.year, b.month, b.date, b.hours, b.minutes); c = a.map(function (a) { return d.formatDate(d.loc.dateFormat, a) }).join(this.opts.multipleDatesSeparator), (this.opts.multipleDates || this.opts.range) && (e = a.map(function (a) { var b = m.getParsedDate(a); return new Date(b.year, b.month, b.date, b.hours, b.minutes) })), this._prevOnSelectValue = c, this.opts.onSelect(c, e, this) }, next: function () { var a = this.parsedDate, b = this.opts; switch (this.view) { case "days": this.date = new Date(a.year, a.month + 1, 1), b.onChangeMonth && b.onChangeMonth(this.parsedDate.month, this.parsedDate.year); break; case "months": this.date = new Date(a.year + 1, a.month, 1), b.onChangeYear && b.onChangeYear(this.parsedDate.year); break; case "years": this.date = new Date(a.year + 10, 0, 1), b.onChangeDecade && b.onChangeDecade(this.curDecade) } }, prev: function () { var a = this.parsedDate, b = this.opts; switch (this.view) { case "days": this.date = new Date(a.year, a.month - 1, 1), b.onChangeMonth && b.onChangeMonth(this.parsedDate.month, this.parsedDate.year); break; case "months": this.date = new Date(a.year - 1, a.month, 1), b.onChangeYear && b.onChangeYear(this.parsedDate.year); break; case "years": this.date = new Date(a.year - 10, 0, 1), b.onChangeDecade && b.onChangeDecade(this.curDecade) } }, formatDate: function (a, b) { b = b || this.date; var o, c = a, d = this._getWordBoundaryRegExp, e = this.loc, f = m.getLeadingZeroNum, g = m.getDecade(b), h = m.getParsedDate(b), i = h.fullHours, j = h.hours, k = a.match(d("aa")) || a.match(d("AA")), l = "am", n = this._replacer; switch (this.opts.timepicker && this.timepicker && k && (o = this.timepicker._getValidHoursFromDate(b, k), i = f(o.hours), j = o.hours, l = o.dayPeriod), !0) { case /@/.test(c): c = c.replace(/@/, b.getTime()); case /aa/.test(c): c = n(c, d("aa"), l); case /AA/.test(c): c = n(c, d("AA"), l.toUpperCase()); case /dd/.test(c): c = n(c, d("dd"), h.fullDate); case /d/.test(c): c = n(c, d("d"), h.date); case /DD/.test(c): c = n(c, d("DD"), e.days[h.day]); case /D/.test(c): c = n(c, d("D"), e.daysShort[h.day]); case /mm/.test(c): c = n(c, d("mm"), h.fullMonth); case /m/.test(c): c = n(c, d("m"), h.month + 1); case /MM/.test(c): c = n(c, d("MM"), this.loc.months[h.month]); case /M/.test(c): c = n(c, d("M"), e.monthsShort[h.month]); case /ii/.test(c): c = n(c, d("ii"), h.fullMinutes); case /i/.test(c): c = n(c, d("i"), h.minutes); case /hh/.test(c): c = n(c, d("hh"), i); case /h/.test(c): c = n(c, d("h"), j); case /yyyy/.test(c): c = n(c, d("yyyy"), h.year); case /yyyy1/.test(c): c = n(c, d("yyyy1"), g[0]); case /yyyy2/.test(c): c = n(c, d("yyyy2"), g[1]); case /yy/.test(c): c = n(c, d("yy"), h.year.toString().slice(-2)) } return c }, _replacer: function (a, b, c) { return a.replace(b, function (a, b, d, e) { return b + c + e }) }, _getWordBoundaryRegExp: function (a) { var b = "\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;"; return new RegExp("(^|>|" + b + ")(" + a + ")($|<|" + b + ")", "g") }, selectDate: function (a) { var b = this, c = b.opts, d = b.parsedDate, e = b.selectedDates, f = e.length, g = ""; if (Array.isArray(a)) return void a.forEach(function (a) { b.selectDate(a) }); if (a instanceof Date) { if (this.lastSelectedDate = a, this.timepicker && this.timepicker._setTime(a), b._trigger("selectDate", a), this.timepicker && (a.setHours(this.timepicker.hours), a.setMinutes(this.timepicker.minutes)), "days" == b.view && a.getMonth() != d.month && c.moveToOtherMonthsOnSelect && (g = new Date(a.getFullYear(), a.getMonth(), 1)), "years" == b.view && a.getFullYear() != d.year && c.moveToOtherYearsOnSelect && (g = new Date(a.getFullYear(), 0, 1)), g && (b.silent = !0, b.date = g, b.silent = !1, b.nav._render()), c.multipleDates && !c.range) { if (f === c.multipleDates) return; b._isSelected(a) || b.selectedDates.push(a) } else c.range ? 2 == f ? (b.selectedDates = [a], b.minRange = a, b.maxRange = "") : 1 == f ? (b.selectedDates.push(a), b.maxRange ? b.minRange = a : b.maxRange = a, m.bigger(b.maxRange, b.minRange) && (b.maxRange = b.minRange, b.minRange = a), b.selectedDates = [b.minRange, b.maxRange]) : (b.selectedDates = [a], b.minRange = a) : b.selectedDates = [a]; b._setInputValue(), c.onSelect && b._triggerOnChange(), c.autoClose && !this.timepickerIsActive && (c.multipleDates || c.range ? c.range && 2 == b.selectedDates.length && b.hide() : b.hide()), b.views[this.currentView]._render() } }, removeDate: function (a) { var b = this.selectedDates, c = this; if (a instanceof Date) return b.some(function (d, e) { if (m.isSame(d, a)) return b.splice(e, 1), c.selectedDates.length ? c.lastSelectedDate = c.selectedDates[c.selectedDates.length - 1] : (c.minRange = "", c.maxRange = "", c.lastSelectedDate = ""), c.views[c.currentView]._render(), c._setInputValue(), c.opts.onSelect && c._triggerOnChange(), !0 }) }, today: function () { this.silent = !0, this.view = this.opts.minView, this.silent = !1, this.date = new Date, this.opts.todayButton instanceof Date && this.selectDate(this.opts.todayButton) }, clear: function () { this.selectedDates = [], this.minRange = "", this.maxRange = "", this.views[this.currentView]._render(), this._setInputValue(), this.opts.onSelect && this._triggerOnChange() }, update: function (a, c) { var d = arguments.length, e = this.lastSelectedDate; return 2 == d ? this.opts[a] = c : 1 == d && "object" == typeof a && (this.opts = b.extend(!0, this.opts, a)), this._createShortCuts(), this._syncWithMinMaxDates(), this._defineLocale(this.opts.language), this.nav._addButtonsIfNeed(), this.opts.onlyTimepicker || this.nav._render(), this.views[this.currentView]._render(), this.elIsInput && !this.opts.inline && (this._setPositionClasses(this.opts.position), this.visible && this.setPosition(this.opts.position)), this.opts.classes && this.$datepicker.addClass(this.opts.classes), this.opts.onlyTimepicker && this.$datepicker.addClass("-only-timepicker-"), this.opts.timepicker && (e && this.timepicker._handleDate(e), this.timepicker._updateRanges(), this.timepicker._updateCurrentTime(), e && (e.setHours(this.timepicker.hours), e.setMinutes(this.timepicker.minutes))), this._setInputValue(), this }, _syncWithMinMaxDates: function () { var a = this.date.getTime(); this.silent = !0, this.minTime > a && (this.date = this.minDate), this.maxTime < a && (this.date = this.maxDate), this.silent = !1 }, _isSelected: function (a, b) { var c = !1; return this.selectedDates.some(function (d) { if (m.isSame(d, a, b)) return c = d, !0 }), c }, _setInputValue: function () { var f, a = this, b = a.opts, c = a.loc.dateFormat, d = b.altFieldDateFormat, e = a.selectedDates.map(function (b) { return a.formatDate(c, b) }); b.altField && a.$altField.length && (f = this.selectedDates.map(function (b) { return a.formatDate(d, b) }), f = f.join(this.opts.multipleDatesSeparator), this.$altField.val(f)), e = e.join(this.opts.multipleDatesSeparator), this.$el.val(e) }, _isInRange: function (a, b) { var c = a.getTime(), d = m.getParsedDate(a), e = m.getParsedDate(this.minDate), f = m.getParsedDate(this.maxDate), g = new Date(d.year, d.month, e.date).getTime(), h = new Date(d.year, d.month, f.date).getTime(), i = { day: c >= this.minTime && c <= this.maxTime, month: g >= this.minTime && h <= this.maxTime, year: d.year >= e.year && d.year <= f.year }; return b ? i[b] : i.day }, _getDimensions: function (a) { var b = a.offset(); return { width: a.outerWidth(), height: a.outerHeight(), left: b.left, top: b.top } }, _getDateFromCell: function (a) { var b = this.parsedDate, d = a.data("year") || b.year, e = a.data("month") == c ? b.month : a.data("month"), f = a.data("date") || 1; return new Date(d, e, f) }, _setPositionClasses: function (a) { a = a.split(" "); var b = a[0], c = a[1], d = "datepicker -" + b + "-" + c + "- -from-" + b + "-"; this.visible && (d += " active"), this.$datepicker.removeAttr("class").addClass(d) }, setPosition: function (a) { a = a || this.opts.position; var e, f, b = this._getDimensions(this.$el), c = this._getDimensions(this.$datepicker), d = a.split(" "), g = this.opts.offset, h = d[0], i = d[1]; switch (h) { case "top": e = b.top - c.height - g; break; case "right": f = b.left + b.width + g; break; case "bottom": e = b.top + b.height + g; break; case "left": f = b.left - c.width - g } switch (i) { case "top": e = b.top; break; case "right": f = b.left + b.width - c.width; break; case "bottom": e = b.top + b.height - c.height; break; case "left": f = b.left; break; case "center": /left|right/.test(h) ? e = b.top + b.height / 2 - c.height / 2 : f = b.left + b.width / 2 - c.width / 2 } this.$datepicker.css({ left: f, top: e }) }, show: function () { var a = this.opts.onShow; this.setPosition(this.opts.position), this.$datepicker.addClass("active"), this.visible = !0, a && this._bindVisionEvents(a) }, hide: function () { var a = this.opts.onHide; this.$datepicker.removeClass("active").css({ left: "-100000px" }), this.focused = "", this.keys = [], this.inFocus = !1, this.visible = !1, this.$el.blur(), a && this._bindVisionEvents(a) }, down: function (a) { this._changeView(a, "down") }, up: function (a) { this._changeView(a, "up") }, _bindVisionEvents: function (a) { this.$datepicker.off("transitionend.dp"), a(this, !1), this.$datepicker.one("transitionend.dp", a.bind(this, this, !0)) }, _changeView: function (a, b) { a = a || this.focused || this.date; var c = "up" == b ? this.viewIndex + 1 : this.viewIndex - 1; c > 2 && (c = 2), c < 0 && (c = 0), this.silent = !0, this.date = new Date(a.getFullYear(), a.getMonth(), 1), this.silent = !1, this.view = this.viewIndexes[c] }, _handleHotKey: function (a) { var c, e, f, b = m.getParsedDate(this._getFocusedDate()), d = this.opts, g = !1, h = !1, i = !1, j = b.year, k = b.month, l = b.date; switch (a) { case "ctrlRight": case "ctrlUp": k += 1, g = !0; break; case "ctrlLeft": case "ctrlDown": k -= 1, g = !0; break; case "shiftRight": case "shiftUp": h = !0, j += 1; break; case "shiftLeft": case "shiftDown": h = !0, j -= 1; break; case "altRight": case "altUp": i = !0, j += 10; break; case "altLeft": case "altDown": i = !0, j -= 10; break; case "ctrlShiftUp": this.up() } f = m.getDaysCount(new Date(j, k)), e = new Date(j, k, l), f < l && (l = f), e.getTime() < this.minTime ? e = this.minDate : e.getTime() > this.maxTime && (e = this.maxDate), this.focused = e, c = m.getParsedDate(e), g && d.onChangeMonth && d.onChangeMonth(c.month, c.year), h && d.onChangeYear && d.onChangeYear(c.year), i && d.onChangeDecade && d.onChangeDecade(this.curDecade) }, _registerKey: function (a) { var b = this.keys.some(function (b) { return b == a }); b || this.keys.push(a) }, _unRegisterKey: function (a) { var b = this.keys.indexOf(a); this.keys.splice(b, 1) }, _isHotKeyPressed: function () { var a, b = !1, c = this, d = this.keys.sort(); for (var e in l) a = l[e], d.length == a.length && a.every(function (a, b) { return a == d[b] }) && (c._trigger("hotKey", e), b = !0); return b }, _trigger: function (a, b) { this.$el.trigger(a, b) }, _focusNextCell: function (a, b) { b = b || this.cellType; var c = m.getParsedDate(this._getFocusedDate()), d = c.year, e = c.month, f = c.date; if (!this._isHotKeyPressed()) { switch (a) { case 37: "day" == b ? f -= 1 : "", "month" == b ? e -= 1 : "", "year" == b ? d -= 1 : ""; break; case 38: "day" == b ? f -= 7 : "", "month" == b ? e -= 3 : "", "year" == b ? d -= 4 : ""; break; case 39: "day" == b ? f += 1 : "", "month" == b ? e += 1 : "", "year" == b ? d += 1 : ""; break; case 40: "day" == b ? f += 7 : "", "month" == b ? e += 3 : "", "year" == b ? d += 4 : "" } var g = new Date(d, e, f); g.getTime() < this.minTime ? g = this.minDate : g.getTime() > this.maxTime && (g = this.maxDate), this.focused = g } }, _getFocusedDate: function () { var a = this.focused || this.selectedDates[this.selectedDates.length - 1], b = this.parsedDate; if (!a) switch (this.view) { case "days": a = new Date(b.year, b.month, (new Date).getDate()); break; case "months": a = new Date(b.year, b.month, 1); break; case "years": a = new Date(b.year, 0, 1) } return a }, _getCell: function (a, c) { c = c || this.cellType; var f, d = m.getParsedDate(a), e = '.datepicker--cell[data-year="' + d.year + '"]'; switch (c) { case "month": e = '[data-month="' + d.month + '"]'; break; case "day": e += '[data-month="' + d.month + '"][data-date="' + d.date + '"]' } return f = this.views[this.currentView].$el.find(e), f.length ? f : b("") }, destroy: function () { var a = this; a.$el.off(".adp").data("datepicker", ""), a.selectedDates = [], a.focused = "", a.views = {}, a.keys = [], a.minRange = "", a.maxRange = "", a.opts.inline || !a.elIsInput ? a.$datepicker.closest(".datepicker-inline").remove() : a.$datepicker.remove() }, _handleAlreadySelectedDates: function (a, b) { this.opts.range ? this.opts.toggleSelected ? this.removeDate(b) : 2 != this.selectedDates.length && this._trigger("clickCell", b) : this.opts.toggleSelected && this.removeDate(b), this.opts.toggleSelected || (this.lastSelectedDate = a, this.opts.timepicker && (this.timepicker._setTime(a), this.timepicker.update())) }, _onShowEvent: function (a) { this.visible || this.show() }, _onBlur: function () { !this.inFocus && this.visible && this.hide() }, _onMouseDownDatepicker: function (a) { this.inFocus = !0 }, _onMouseUpDatepicker: function (a) { this.inFocus = !1, a.originalEvent.inFocus = !0, a.originalEvent.timepickerFocus || this.$el.focus() }, _onKeyUpGeneral: function (a) { }, _onResize: function () { this.visible && this.setPosition() }, _onMouseUpBody: function (a) { a.originalEvent.inFocus || this.visible && !this.inFocus && this.hide() }, _onMouseUpEl: function (a) { a.originalEvent.inFocus = !0, setTimeout(this._onKeyUpGeneral.bind(this), 4) }, _onKeyDown: function (a) { var b = a.which; if (this._registerKey(b), b >= 37 && b <= 40 && (a.preventDefault(), this._focusNextCell(b)), 13 == b && this.focused) { if (this._getCell(this.focused).hasClass("-disabled-")) return; if (this.view != this.opts.minView) this.down(); else { var c = this._isSelected(this.focused, this.cellType); if (!c) return this.timepicker && (this.focused.setHours(this.timepicker.hours), this.focused.setMinutes(this.timepicker.minutes)), void this.selectDate(this.focused); this._handleAlreadySelectedDates(c, this.focused) } } 27 == b && this.hide() }, _onKeyUp: function (a) { var b = a.which; this._unRegisterKey(b) }, _onHotKey: function (a, b) { this._handleHotKey(b) }, _onMouseEnterCell: function (a) { var c = b(a.target).closest(".datepicker--cell"), d = this._getDateFromCell(c); this.silent = !0, this.focused && (this.focused = ""), c.addClass("-focus-"), this.focused = d, this.silent = !1, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], this.maxRange = "", m.less(this.minRange, this.focused) && (this.maxRange = this.minRange, this.minRange = ""), this.views[this.currentView]._update()) }, _onMouseLeaveCell: function (a) { var c = b(a.target).closest(".datepicker--cell"); c.removeClass("-focus-"), this.silent = !0, this.focused = "", this.silent = !1 }, _onTimeChange: function (a, b, c) { var d = new Date, e = this.selectedDates, f = !1; e.length && (f = !0, d = this.lastSelectedDate), d.setHours(b), d.setMinutes(c), f || this._getCell(d).hasClass("-disabled-") ? (this._setInputValue(), this.opts.onSelect && this._triggerOnChange()) : this.selectDate(d) }, _onClickCell: function (a, b) { this.timepicker && (b.setHours(this.timepicker.hours), b.setMinutes(this.timepicker.minutes)), this.selectDate(b) }, set focused(a) { if (!a && this.focused) { var b = this._getCell(this.focused); b.length && b.removeClass("-focus-") } this._focused = a, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], this.maxRange = "", m.less(this.minRange, this._focused) && (this.maxRange = this.minRange, this.minRange = "")), this.silent || (this.date = a) }, get focused() { return this._focused }, get parsedDate() { return m.getParsedDate(this.date) }, set date(a) { if (a instanceof Date) return this.currentDate = a, this.inited && !this.silent && (this.views[this.view]._render(), this.nav._render(), this.visible && this.elIsInput && this.setPosition()), a }, get date() { return this.currentDate }, set view(a) { if (this.viewIndex = this.viewIndexes.indexOf(a), !(this.viewIndex < 0)) return this.prevView = this.currentView, this.currentView = a, this.inited && (this.views[a] ? this.views[a]._render() : this.views[a] = new b.fn.datepicker.Body(this, a, this.opts), this.views[this.prevView].hide(), this.views[a].show(), this.nav._render(), this.opts.onChangeView && this.opts.onChangeView(a), this.elIsInput && this.visible && this.setPosition()), a }, get view() { return this.currentView }, get cellType() { return this.view.substring(0, this.view.length - 1) }, get minTime() { var a = m.getParsedDate(this.minDate); return new Date(a.year, a.month, a.date).getTime() }, get maxTime() { var a = m.getParsedDate(this.maxDate); return new Date(a.year, a.month, a.date).getTime() }, get curDecade() { return m.getDecade(this.date) } }, m.getDaysCount = function (a) { return new Date(a.getFullYear(), a.getMonth() + 1, 0).getDate() }, m.getParsedDate = function (a) { return { year: a.getFullYear(), month: a.getMonth(), fullMonth: a.getMonth() + 1 < 10 ? "0" + (a.getMonth() + 1) : a.getMonth() + 1, date: a.getDate(), fullDate: a.getDate() < 10 ? "0" + a.getDate() : a.getDate(), day: a.getDay(), hours: a.getHours(), fullHours: a.getHours() < 10 ? "0" + a.getHours() : a.getHours(), minutes: a.getMinutes(), fullMinutes: a.getMinutes() < 10 ? "0" + a.getMinutes() : a.getMinutes() } }, m.getDecade = function (a) { var b = 10 * Math.floor(a.getFullYear() / 10); return [b, b + 9] }, m.template = function (a, b) { return a.replace(/#\{([\w]+)\}/g, function (a, c) { if (b[c] || 0 === b[c]) return b[c] }) }, m.isSame = function (a, b, c) { if (!a || !b) return !1; var d = m.getParsedDate(a), e = m.getParsedDate(b), f = c ? c : "day", g = { day: d.date == e.date && d.month == e.month && d.year == e.year, month: d.month == e.month && d.year == e.year, year: d.year == e.year }; return g[f] }, m.less = function (a, b, c) { return !(!a || !b) && b.getTime() < a.getTime() }, m.bigger = function (a, b, c) { return !(!a || !b) && b.getTime() > a.getTime() }, m.getLeadingZeroNum = function (a) { return parseInt(a) < 10 ? "0" + a : a }, m.resetTime = function (a) { if ("object" == typeof a) return a = m.getParsedDate(a), new Date(a.year, a.month, a.date) }, b.fn.datepicker = function (a) { return this.each(function () { if (b.data(this, e)) { var c = b.data(this, e); c.opts = b.extend(!0, c.opts, a), c.update() } else b.data(this, e, new n(this, a)) }) }, b.fn.datepicker.Constructor = n, b.fn.datepicker.language = { ru: { days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"], daysShort: ["Вос", "Пон", "Вто", "Сре", "Чет", "Пят", "Суб"], daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"], monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"], today: "Сегодня", clear: "Очистить", dateFormat: "dd.mm.yyyy", timeFormat: "hh:ii", firstDay: 1 } }, b(function () { b(f).datepicker() }) }(), function () { var a = { days: '<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>', months: '<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>', years: '<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>' }, d = b.fn.datepicker, e = d.Constructor; d.Body = function (a, c, d) { this.d = a, this.type = c, this.opts = d, this.$el = b(""), this.opts.onlyTimepicker || this.init() }, d.Body.prototype = { init: function () { this._buildBaseHtml(), this._render(), this._bindEvents() }, _bindEvents: function () { this.$el.on("click", ".datepicker--cell", b.proxy(this._onClickCell, this)) }, _buildBaseHtml: function () { this.$el = b(a[this.type]).appendTo(this.d.$content), this.$names = b(".datepicker--days-names", this.$el), this.$cells = b(".datepicker--cells", this.$el) }, _getDayNamesHtml: function (a, b, d, e) { return b = b != c ? b : a, d = d ? d : "", e = e != c ? e : 0, e > 7 ? d : 7 == b ? this._getDayNamesHtml(a, 0, d, ++e) : (d += '<div class="datepicker--day-name' + (this.d.isWeekend(b) ? " -weekend-" : "") + '">' + this.d.loc.daysMin[b] + "</div>", this._getDayNamesHtml(a, ++b, d, ++e)) }, _getCellContents: function (a, b) { var c = "datepicker--cell datepicker--cell-" + b, d = new Date, f = this.d, g = e.resetTime(f.minRange), h = e.resetTime(f.maxRange), i = f.opts, j = e.getParsedDate(a), k = {}, l = j.date; switch (b) { case "day": f.isWeekend(j.day) && (c += " -weekend-"), j.month != this.d.parsedDate.month && (c += " -other-month-", i.selectOtherMonths || (c += " -disabled-"), i.showOtherMonths || (l = "")); break; case "month": l = f.loc[f.opts.monthsField][j.month]; break; case "year": var m = f.curDecade; l = j.year, (j.year < m[0] || j.year > m[1]) && (c += " -other-decade-", i.selectOtherYears || (c += " -disabled-"), i.showOtherYears || (l = "")) } return i.onRenderCell && (k = i.onRenderCell(a, b) || {}, l = k.html ? k.html : l, c += k.classes ? " " + k.classes : ""), i.range && (e.isSame(g, a, b) && (c += " -range-from-"), e.isSame(h, a, b) && (c += " -range-to-"), 1 == f.selectedDates.length && f.focused ? ((e.bigger(g, a) && e.less(f.focused, a) || e.less(h, a) && e.bigger(f.focused, a)) && (c += " -in-range-"), e.less(h, a) && e.isSame(f.focused, a) && (c += " -range-from-"), e.bigger(g, a) && e.isSame(f.focused, a) && (c += " -range-to-")) : 2 == f.selectedDates.length && e.bigger(g, a) && e.less(h, a) && (c += " -in-range-")), e.isSame(d, a, b) && (c += " -current-"), f.focused && e.isSame(a, f.focused, b) && (c += " -focus-"), f._isSelected(a, b) && (c += " -selected-"), f._isInRange(a, b) && !k.disabled || (c += " -disabled-"), { html: l, classes: c } }, _getDaysHtml: function (a) { var b = e.getDaysCount(a), c = new Date(a.getFullYear(), a.getMonth(), 1).getDay(), d = new Date(a.getFullYear(), a.getMonth(), b).getDay(), f = c - this.d.loc.firstDay, g = 6 - d + this.d.loc.firstDay; f = f < 0 ? f + 7 : f, g = g > 6 ? g - 7 : g; for (var i, j, h = -f + 1, k = "", l = h, m = b + g; l <= m; l++) j = a.getFullYear(), i = a.getMonth(), k += this._getDayHtml(new Date(j, i, l)); return k }, _getDayHtml: function (a) { var b = this._getCellContents(a, "day"); return '<div class="' + b.classes + '" data-date="' + a.getDate() + '" data-month="' + a.getMonth() + '" data-year="' + a.getFullYear() + '">' + b.html + "</div>" }, _getMonthsHtml: function (a) { for (var b = "", c = e.getParsedDate(a), d = 0; d < 12;) b += this._getMonthHtml(new Date(c.year, d)), d++; return b }, _getMonthHtml: function (a) { var b = this._getCellContents(a, "month"); return '<div class="' + b.classes + '" data-month="' + a.getMonth() + '">' + b.html + "</div>" }, _getYearsHtml: function (a) { var c = (e.getParsedDate(a), e.getDecade(a)), d = c[0] - 1, f = "", g = d; for (g; g <= c[1] + 1; g++) f += this._getYearHtml(new Date(g, 0)); return f }, _getYearHtml: function (a) { var b = this._getCellContents(a, "year"); return '<div class="' + b.classes + '" data-year="' + a.getFullYear() + '">' + b.html + "</div>" }, _renderTypes: { days: function () { var a = this._getDayNamesHtml(this.d.loc.firstDay), b = this._getDaysHtml(this.d.currentDate); this.$cells.html(b), this.$names.html(a) }, months: function () { var a = this._getMonthsHtml(this.d.currentDate); this.$cells.html(a) }, years: function () { var a = this._getYearsHtml(this.d.currentDate); this.$cells.html(a) } }, _render: function () { this.opts.onlyTimepicker || this._renderTypes[this.type].bind(this)() }, _update: function () { var d, e, f, a = b(".datepicker--cell", this.$cells), c = this; a.each(function (a, g) { e = b(this), f = c.d._getDateFromCell(b(this)), d = c._getCellContents(f, c.d.cellType), e.attr("class", d.classes) }) }, show: function () { this.opts.onlyTimepicker || (this.$el.addClass("active"), this.acitve = !0) }, hide: function () { this.$el.removeClass("active"), this.active = !1 }, _handleClick: function (a) { var b = a.data("date") || 1, c = a.data("month") || 0, d = a.data("year") || this.d.parsedDate.year, e = this.d; if (e.view != this.opts.minView) return void e.down(new Date(d, c, b)); var f = new Date(d, c, b), g = this.d._isSelected(f, this.d.cellType); return g ? void e._handleAlreadySelectedDates.bind(e, g, f)() : void e._trigger("clickCell", f) }, _onClickCell: function (a) { var c = b(a.target).closest(".datepicker--cell"); c.hasClass("-disabled-") || this._handleClick.bind(this)(c) } } }(), function () { var a = '<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>', c = '<div class="datepicker--buttons"></div>', d = '<span class="datepicker--button" data-action="#{action}">#{label}</span>', e = b.fn.datepicker, f = e.Constructor; e.Navigation = function (a, b) { this.d = a, this.opts = b, this.$buttonsContainer = "", this.init() }, e.Navigation.prototype = { init: function () { this._buildBaseHtml(), this._bindEvents() }, _bindEvents: function () { this.d.$nav.on("click", ".datepicker--nav-action", b.proxy(this._onClickNavButton, this)), this.d.$nav.on("click", ".datepicker--nav-title", b.proxy(this._onClickNavTitle, this)), this.d.$datepicker.on("click", ".datepicker--button", b.proxy(this._onClickNavButton, this)) }, _buildBaseHtml: function () { this.opts.onlyTimepicker || this._render(), this._addButtonsIfNeed() }, _addButtonsIfNeed: function () { this.opts.todayButton && this._addButton("today"), this.opts.clearButton && this._addButton("clear") }, _render: function () { var c = this._getTitle(this.d.currentDate), d = f.template(a, b.extend({ title: c }, this.opts)); this.d.$nav.html(d), "years" == this.d.view && b(".datepicker--nav-title", this.d.$nav).addClass("-disabled-"), this.setNavStatus() }, _getTitle: function (a) { return this.d.formatDate(this.opts.navTitles[this.d.view], a) }, _addButton: function (a) { this.$buttonsContainer.length || this._addButtonsContainer(); var c = { action: a, label: this.d.loc[a] }, e = f.template(d, c); b("[data-action=" + a + "]", this.$buttonsContainer).length || this.$buttonsContainer.append(e) }, _addButtonsContainer: function () { this.d.$datepicker.append(c), this.$buttonsContainer = b(".datepicker--buttons", this.d.$datepicker) }, setNavStatus: function () { if ((this.opts.minDate || this.opts.maxDate) && this.opts.disableNavWhenOutOfRange) { var a = this.d.parsedDate, b = a.month, c = a.year, d = a.date; switch (this.d.view) { case "days": this.d._isInRange(new Date(c, b - 1, 1), "month") || this._disableNav("prev"), this.d._isInRange(new Date(c, b + 1, 1), "month") || this._disableNav("next"); break; case "months": this.d._isInRange(new Date(c - 1, b, d), "year") || this._disableNav("prev"), this.d._isInRange(new Date(c + 1, b, d), "year") || this._disableNav("next"); break; case "years": var e = f.getDecade(this.d.date); this.d._isInRange(new Date(e[0] - 1, 0, 1), "year") || this._disableNav("prev"), this.d._isInRange(new Date(e[1] + 1, 0, 1), "year") || this._disableNav("next") } } }, _disableNav: function (a) { b('[data-action="' + a + '"]', this.d.$nav).addClass("-disabled-") }, _activateNav: function (a) { b('[data-action="' + a + '"]', this.d.$nav).removeClass("-disabled-") }, _onClickNavButton: function (a) { var c = b(a.target).closest("[data-action]"), d = c.data("action"); this.d[d]() }, _onClickNavTitle: function (a) { if (!b(a.target).hasClass("-disabled-")) return "days" == this.d.view ? this.d.view = "months" : void (this.d.view = "years") } } }(), function () {
        var a = '<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>', c = b.fn.datepicker, d = c.Constructor; c.Timepicker = function (a, b) { this.d = a, this.opts = b, this.init() }, c.Timepicker.prototype = {
            init: function () { var a = "input"; this._setTime(this.d.date), this._buildHTML(), navigator.userAgent.match(/trident/gi) && (a = "change"), this.d.$el.on("selectDate", this._onSelectDate.bind(this)), this.$ranges.on(a, this._onChangeRange.bind(this)), this.$ranges.on("mouseup", this._onMouseUpRange.bind(this)), this.$ranges.on("mousemove focus ", this._onMouseEnterRange.bind(this)), this.$ranges.on("mouseout blur", this._onMouseOutRange.bind(this)) }, _setTime: function (a) { var b = d.getParsedDate(a); this._handleDate(a), this.hours = b.hours < this.minHours ? this.minHours : b.hours, this.minutes = b.minutes < this.minMinutes ? this.minMinutes : b.minutes }, _setMinTimeFromDate: function (a) { this.minHours = a.getHours(), this.minMinutes = a.getMinutes(), this.d.lastSelectedDate && this.d.lastSelectedDate.getHours() > a.getHours() && (this.minMinutes = this.opts.minMinutes) }, _setMaxTimeFromDate: function (a) {
                this.maxHours = a.getHours(), this.maxMinutes = a.getMinutes(), this.d.lastSelectedDate && this.d.lastSelectedDate.getHours() < a.getHours() && (this.maxMinutes = this.opts.maxMinutes);
            }, _setDefaultMinMaxTime: function () { var a = 23, b = 59, c = this.opts; this.minHours = c.minHours < 0 || c.minHours > a ? 0 : c.minHours, this.minMinutes = c.minMinutes < 0 || c.minMinutes > b ? 0 : c.minMinutes, this.maxHours = c.maxHours < 0 || c.maxHours > a ? a : c.maxHours, this.maxMinutes = c.maxMinutes < 0 || c.maxMinutes > b ? b : c.maxMinutes }, _validateHoursMinutes: function (a) { this.hours < this.minHours ? this.hours = this.minHours : this.hours > this.maxHours && (this.hours = this.maxHours), this.minutes < this.minMinutes ? this.minutes = this.minMinutes : this.minutes > this.maxMinutes && (this.minutes = this.maxMinutes) }, _buildHTML: function () { var c = d.getLeadingZeroNum, e = { hourMin: this.minHours, hourMax: c(this.maxHours), hourStep: this.opts.hoursStep, hourValue: this.hours, hourVisible: c(this.displayHours), minMin: this.minMinutes, minMax: c(this.maxMinutes), minStep: this.opts.minutesStep, minValue: c(this.minutes) }, f = d.template(a, e); this.$timepicker = b(f).appendTo(this.d.$datepicker), this.$ranges = b('[type="range"]', this.$timepicker), this.$hours = b('[name="hours"]', this.$timepicker), this.$minutes = b('[name="minutes"]', this.$timepicker), this.$hoursText = b(".datepicker--time-current-hours", this.$timepicker), this.$minutesText = b(".datepicker--time-current-minutes", this.$timepicker), this.d.ampm && (this.$ampm = b('<span class="datepicker--time-current-ampm">').appendTo(b(".datepicker--time-current", this.$timepicker)).html(this.dayPeriod), this.$timepicker.addClass("-am-pm-")) }, _updateCurrentTime: function () { var a = d.getLeadingZeroNum(this.displayHours), b = d.getLeadingZeroNum(this.minutes); this.$hoursText.html(a), this.$minutesText.html(b), this.d.ampm && this.$ampm.html(this.dayPeriod) }, _updateRanges: function () { this.$hours.attr({ min: this.minHours, max: this.maxHours }).val(this.hours), this.$minutes.attr({ min: this.minMinutes, max: this.maxMinutes }).val(this.minutes) }, _handleDate: function (a) { this._setDefaultMinMaxTime(), a && (d.isSame(a, this.d.opts.minDate) ? this._setMinTimeFromDate(this.d.opts.minDate) : d.isSame(a, this.d.opts.maxDate) && this._setMaxTimeFromDate(this.d.opts.maxDate)), this._validateHoursMinutes(a) }, update: function () { this._updateRanges(), this._updateCurrentTime() }, _getValidHoursFromDate: function (a, b) { var c = a, e = a; a instanceof Date && (c = d.getParsedDate(a), e = c.hours); var f = b || this.d.ampm, g = "am"; if (f) switch (!0) { case 0 == e: e = 12; break; case 12 == e: g = "pm"; break; case e > 11: e -= 12, g = "pm" } return { hours: e, dayPeriod: g } }, set hours(a) { this._hours = a; var b = this._getValidHoursFromDate(a); this.displayHours = b.hours, this.dayPeriod = b.dayPeriod }, get hours() { return this._hours }, _onChangeRange: function (a) { var c = b(a.target), d = c.attr("name"); this.d.timepickerIsActive = !0, this[d] = c.val(), this._updateCurrentTime(), this.d._trigger("timeChange", [this.hours, this.minutes]), this._handleDate(this.d.lastSelectedDate), this.update() }, _onSelectDate: function (a, b) { this._handleDate(b), this.update() }, _onMouseEnterRange: function (a) { var c = b(a.target).attr("name"); b(".datepicker--time-current-" + c, this.$timepicker).addClass("-focus-") }, _onMouseOutRange: function (a) { var c = b(a.target).attr("name"); this.d.inFocus || b(".datepicker--time-current-" + c, this.$timepicker).removeClass("-focus-") }, _onMouseUpRange: function (a) { this.d.timepickerIsActive = !1 }
        }
    }()
}(window, jQuery);