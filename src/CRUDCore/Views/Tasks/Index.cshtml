@using CRUDCore.Helpers
@model PaginatedList<CRUDCore.Models.Tasks>

@{
    ViewData["Title"] = "Index - Tasks";
}

<h2>Index</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get" class="form-horizontal form-inline">
    <input type="text" class="form-control" name="SearchString" value="@ViewData["CurrentFilter"]" placeholder="Search by title" />
    <button type="submit" class="btn btn-default">Search</button>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().IdCategoryTask)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().FromDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().DeadlineDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().UnitPer)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().IsActive)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CategoryTask.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.FromDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DeadlineDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UnitPer)%
                </td>
                <td>
                    @{
                        var status = item.IsActive == true ? "Actived" : "UnActived";
                    }
                    @Html.DisplayFor(modelItem => status)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                    <a href="#" data-id="@item.ID" id="btnTaskDelete">Delete</a>
                </td>
            </tr>
                        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled btn">
    Previous
</a>
<a asp-action="Index"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled btn">
    Next
</a>
@section scripts{
    <script src="~/js/deleteItems.js"></script>
}